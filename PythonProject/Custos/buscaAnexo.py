import re
import time
import pandas as pd
import os
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from openpyxl import load_workbook

# üìå Caminhos dos arquivos
CAMINHO_ENTRADA = r"C:\Users\diego.brito\Downloads\robov1\CONTROLE DE PARCERIAS CGAP.xlsx"
CAMINHO_SAIDA = r"C:\Users\diego.brito\Downloads\robov1\saida_Anexos.xlsx"

# üõ† Conectar ao navegador j√° aberto
def conectar_navegador_existente():
    """Conecta ao navegador Chrome j√° aberto na porta 9222."""
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9222"
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        print("‚úÖ Conectado ao navegador existente!")
        return driver
    except Exception as erro:
        print(f"‚ùå Erro ao conectar ao navegador: {erro}")
        exit()

# üì• Ler os n√∫meros da coluna "Instrumento n¬∫" na aba "PARCERIAS CGAP"
import pandas as pd

def obter_dados_propostas():
    """L√™ os dados da planilha e filtra apenas os instrumentos com Status 'ATIVOS TODOS', ignorando campos vazios."""
    try:
        df = pd.read_excel(CAMINHO_ENTRADA, sheet_name="PARCERIAS CGAP",
                           usecols=["Instrumento n¬∫", "T√©cnico", "e-mail do T√©cnico", "Status"])

        df.columns = df.columns.str.strip()  # Remove espa√ßos dos nomes das colunas

        # üîπ Remover completamente as linhas onde "Instrumento n¬∫" est√° vazio ou √© NaN
        df = df.dropna(subset=["Instrumento n¬∫"])

        # üîπ Converter para string, remover espa√ßos extras e garantir formato correto
        df["Instrumento n¬∫"] = df["Instrumento n¬∫"].astype(str).str.replace(r"\.0$", "", regex=True).str.strip()

        # üîπ Filtrar linhas onde "Instrumento n¬∫" ainda pode estar vazio ap√≥s limpeza
        df = df[df["Instrumento n¬∫"] != ""]

        # üîπ Preencher valores nulos em outras colunas
        df["T√©cnico"] = df["T√©cnico"].fillna("Desconhecido").astype(str).str.strip()
        df["e-mail do T√©cnico"] = df["e-mail do T√©cnico"].fillna("Sem e-mail").astype(str).str.strip()
        df["Status"] = df["Status"].fillna("").astype(str).str.strip().str.upper()

        # üîπ Filtrar apenas os instrumentos ativos
        df_filtrado = df[df["Status"] == "ATIVOS TODOS"]

        if df_filtrado.empty:
            print("‚ö†Ô∏è Nenhum instrumento ativo encontrado na planilha!")
            return pd.DataFrame()

        return df_filtrado

    except Exception as e:
        print(f"‚ùå Erro ao ler a planilha: {e}")
        return pd.DataFrame()




# üîç Fun√ß√£o para buscar a data mais recente ou registrar "Nenhum anexo encontrado"
def encontrar_data_mais_recente(driver, tabela_xpath):
    """Busca a data mais recente dentro da tabela especificada. Se n√£o encontrar anexos, registra 'Nenhum anexo encontrado'."""
    wait = WebDriverWait(driver, 5)
    try:
        if verificar_ausencia_de_anexos(driver):
            return "Nenhum anexo encontrado"

        wait.until(EC.presence_of_element_located((By.XPATH, tabela_xpath)))
        elementos_datas = driver.find_elements(By.XPATH, f"{tabela_xpath}/tbody/tr/td[3]")  # Coluna 3 = Data

        datas = []
        for elemento in elementos_datas:
            try:
                data_texto = elemento.text.strip()
                data_formatada = datetime.strptime(data_texto, "%d/%m/%Y")
                datas.append(data_formatada)
            except ValueError:
                continue

        return max(datas).strftime('%d/%m/%Y') if datas else "Nenhum anexo encontrado"
    except Exception:
        return "Nenhum anexo encontrado"


def obter_dados_tecnico(numero_instrumento):
    """Retorna o T√©cnico e o E-mail do T√©cnico apenas para instrumentos ativos."""
    try:
        df = pd.read_excel(CAMINHO_ENTRADA, sheet_name="PARCERIAS CGAP",
                           usecols=["Instrumento n¬∫", "T√©cnico", "e-mail do T√©cnico", "Status"])

        # üîç Remover espa√ßos dos nomes das colunas
        df.columns = df.columns.str.strip()

        # üîç Garantir que "Instrumento n¬∫" √© string sem ".0"
        df["Instrumento n¬∫"] = df["Instrumento n¬∫"].fillna("").astype(str).str.replace(r"\.0$", "", regex=True).str.strip()
        df["T√©cnico"] = df["T√©cnico"].fillna("Desconhecido").astype(str).str.strip()
        df["e-mail do T√©cnico"] = df["e-mail do T√©cnico"].fillna("Sem e-mail").astype(str).str.strip()
        df["Status"] = df["Status"].fillna("").astype(str).str.strip().str.upper()

        # üìå Filtrar apenas os instrumentos ativos e que correspondem ao n√∫mero pesquisado
        filtro = (df["Instrumento n¬∫"] == str(numero_instrumento)) & (df["Status"] == "ATIVOS TODOS")
        dados = df[filtro]

        if not dados.empty:
            # üìå Se houver mais de um t√©cnico para o mesmo instrumento, junta os valores com "; "
            tecnico = "; ".join(dados["T√©cnico"].unique())
            email_tecnico = "; ".join(dados["e-mail do T√©cnico"].unique())
            return tecnico, email_tecnico
        else:
            return "Desconhecido", "Sem e-mail"

    except Exception as e:
        print(f"‚ùå Erro ao ler a planilha: {e}")
        return "Erro", "Erro"



from selenium.common.exceptions import TimeoutException, NoSuchElementException
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from datetime import datetime

def processar_proposta(driver, numero_instrumento):
    """Executa a automa√ß√£o para extrair as datas da proposta e execu√ß√£o."""
    wait = WebDriverWait(driver, 10)

    try:
        print(f"üîé Buscando Instrumento {numero_instrumento}...")

        # üìå Acessar a pesquisa de propostas
        wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[3]/div[1]/div[1]/div[1]/div[4]"))).click()
        wait.until(EC.element_to_be_clickable((By.XPATH, "/html/body/div[1]/div[3]/div[2]/div[1]/div[1]/ul/li[6]/a"))).click()

        # üìå Inserir n√∫mero do instrumento e submeter
        campo_instrumento = wait.until(EC.visibility_of_element_located(
            (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div/div/form/table/tbody/tr[2]/td[2]/input")))
        campo_instrumento.clear()
        campo_instrumento.send_keys(numero_instrumento)

        wait.until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div/div/form/table/tbody/tr[2]/td[2]/span/input"))).click()

        # üìå Clicar no link do instrumento
        wait.until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div[3]/table/tbody/tr/td/div/a"))).click()

        # üìå Verificar se a p√°gina cont√©m apenas o bot√£o "Listar Anexos Proposta"
        try:
            if driver.find_element(By.XPATH, "//button[contains(text(), 'Listar Anexos Proposta')]").is_displayed():
                print(f"‚ö†Ô∏è Nenhum anexo dispon√≠vel para {numero_instrumento}. Registrando e continuando o loop...")
                return "Nenhuma aba de anexos dispon√≠vel", "Nenhuma aba de anexos dispon√≠vel"
        except NoSuchElementException:
            pass  # Se o bot√£o n√£o estiver presente, continua normalmente

        # üìå Acessar aba de anexos proposta
        try:
            wait.until(EC.element_to_be_clickable(
                (By.XPATH, "/html/body/div[3]/div[15]/div[1]/div/div[1]/a[2]/div/span/span"))).click()
            wait.until(EC.element_to_be_clickable(
                (By.XPATH, "/html/body/div[3]/div[15]/div[1]/div/div[2]/a[8]/div/span/span"))).click()
        except (TimeoutException, NoSuchElementException):
            print(f"‚ö†Ô∏è Erro ao acessar aba de anexos proposta para {numero_instrumento}. Registrando erro e seguindo...")
            return "Nenhuma aba de anexos dispon√≠vel", "Nenhuma aba de anexos dispon√≠vel"

        # üìå Acessar aba de anexos execu√ß√£o
        try:
            wait.until(EC.element_to_be_clickable(
                (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div[1]/div/form/table/tbody/tr/td[2]/input[1]"))).click()
        except (TimeoutException, NoSuchElementException):
            print(f"‚ö†Ô∏è Erro ao acessar aba de anexos execu√ß√£o para {numero_instrumento}. Registrando erro e voltando ao loop...")
            return "Nenhuma aba de anexos dispon√≠vel", "Nenhuma aba de anexos dispon√≠vel"

        # üìå Capturar a data mais recente na aba "Anexos Proposta"
        try:
            data_anexos_proposta = encontrar_data_mais_recente(
                driver, "/html/body/div[3]/div[15]/div[4]/div/div[1]/form/div/div[1]/table"
            )
        except (TimeoutException, NoSuchElementException):
            print(f"‚ö†Ô∏è Erro ao capturar anexos da proposta para {numero_instrumento}.")
            data_anexos_proposta = "Elemento n√£o encontrado"

        # üìå Voltar para a tela principal
        wait.until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/div[3]/div[15]/div[4]/div/div[1]/form/table/tbody/tr[1]/td/input"))).click()

        # üìå Acessar aba de anexos execu√ß√£o (segundo bot√£o)
        try:
            wait.until(EC.element_to_be_clickable(
                (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div[1]/div/form/table/tbody/tr/td[2]/input[2]"))).click()
        except (TimeoutException, NoSuchElementException):
            print(f"‚ö†Ô∏è Erro ao acessar novamente a aba de anexos execu√ß√£o para {numero_instrumento}. Registrando erro e voltando ao loop...")
            return data_anexos_proposta, "Nenhuma aba de anexos dispon√≠vel"

        # üìå Capturar a data mais recente na aba "Anexos Execu√ß√£o"
        try:
            data_anexos_execucao = encontrar_data_mais_recente(
                driver, "/html/body/div[3]/div[15]/div[4]/div/div[1]/form/div/div[1]/table"
            )
        except (TimeoutException, NoSuchElementException):
            print(f"‚ö†Ô∏è Erro ao capturar anexos da execu√ß√£o para {numero_instrumento}.")
            data_anexos_execucao = "Elemento n√£o encontrado"

        # üìå Voltar ao loop
        wait.until(EC.element_to_be_clickable(
            (By.XPATH, "/html/body/div[3]/div[2]/div[1]/a"))).click()

        print(f"‚úÖ Conclu√≠do: {numero_instrumento} - Proposta: {data_anexos_proposta} | Execu√ß√£o: {data_anexos_execucao}")
        return data_anexos_proposta, data_anexos_execucao

    except Exception as e:
        print(f"‚ùå Erro inesperado ao processar {numero_instrumento}: {e}")
        return "Erro inesperado", "Erro inesperado"


# üõ† Verificar se n√£o h√° anexos
def verificar_ausencia_de_anexos(driver):
    """Verifica se a mensagem 'Nenhum registro foi encontrado.' est√° na p√°gina."""
    try:
        mensagem_xpath = "//div[contains(text(), 'Nenhum registro foi encontrado.')]"
        return driver.find_element(By.XPATH, mensagem_xpath).is_displayed()
    except:
        return False



# üöÄ Fun√ß√£o para salvar os dados no Excel sem sobrescrever o conte√∫do existente
def salvar_dados(df_saida):
    if os.path.exists(CAMINHO_SAIDA):
        with pd.ExcelWriter(CAMINHO_SAIDA, engine="openpyxl", mode="a", if_sheet_exists="overlay") as writer:
            df_saida.to_excel(writer, index=False, sheet_name="Dados", header=False, startrow=writer.sheets["Dados"].max_row)
    else:
        df_saida.to_excel(CAMINHO_SAIDA, index=False, sheet_name="Dados")

# üöÄ Executar automa√ß√£o
def executar_automacao():
    driver = conectar_navegador_existente()
    df_propostas = obter_dados_propostas()

    if df_propostas.empty:
        print("‚ö†Ô∏è Nenhum instrumento encontrado na aba 'PARCERIAS CGAP'.")
        return

    for _, row in df_propostas.iterrows():
        numero_instrumento = row["Instrumento n¬∫"]
        tecnico = row["T√©cnico"]
        email_tecnico = row["e-mail do T√©cnico"]

        print(f"üîé Processando Instrumento {numero_instrumento}...")

        # üìå Buscar datas dos anexos
        data_proposta, data_execucao = processar_proposta(driver, numero_instrumento)

        # Criar DataFrame para salvar no Excel
        df_saida = pd.DataFrame([{
            "Instrumento n¬∫": numero_instrumento,
            "T√©cnico": tecnico,
            "e-mail do T√©cnico": email_tecnico,
            "Data Anexos Proposta": data_proposta,
            "Data Anexos Execu√ß√£o": data_execucao
        }])

        salvar_dados(df_saida)

    driver.quit()

# üî• Rodar a automa√ß√£o
executar_automacao()