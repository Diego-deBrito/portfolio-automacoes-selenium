import time
import pandas as pd
import os
from selenium import webdriver
from selenium.webdriver import ActionChains
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from datetime import datetime
import pandas as pd
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException, ElementNotInteractableException







# üõ† Conectar ao navegador j√° aberto
def conectar_navegador_existente():
    options = webdriver.ChromeOptions()
    options.debugger_address = "localhost:9222"
    try:
        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
        print("‚úÖ Conectado ao navegador existente!")
        return driver
    except Exception as erro:
        print(f"‚ùå Erro ao conectar ao navegador: {erro}")
        exit()

# üìÇ Ler planilha de entrada
def ler_planilha(arquivo=r"C:\Users\diego.brito\Downloads\robov1\CONTROLE DE PARCERIAS CGAP.xlsx"):
    df = pd.read_excel(arquivo, engine="openpyxl")
    return df[df["Status"] == "ATIVOS TODOS"]



# üì§ Salvar planilha de sa√≠da sem sobrescrever os dados
def salvar_planilha(df, arquivo=r"C:\Users\diego.brito\Downloads\robov1\resultado_abas_main.xlsx"):
    try:
        if os.path.exists(arquivo):
            df_existente = pd.read_excel(arquivo, engine="openpyxl")
            df = pd.concat([df_existente, df], ignore_index=True)  # Mesclar os dados antigos com os novos

        df.to_excel(arquivo, index=False)
        print(f"üìÇ Planilha atualizada com sucesso: {arquivo}")
    except PermissionError:
        print(f"‚ö†Ô∏è Erro: Feche o arquivo {arquivo} antes de salvar.")
    except Exception as e:
        print(f"‚ùå Erro ao salvar a planilha: {e}")


# üîç Espera um elemento estar vis√≠vel
def esperar_elemento(driver, xpath, tempo=10):
    try:
        return WebDriverWait(driver, tempo).until(EC.presence_of_element_located((By.XPATH, xpath)))
    except:
        print(f"‚ö†Ô∏è Elemento {xpath} n√£o encontrado!")
        return None


# üîÑ Navegar no menu principal
def navegar_menu_principal(driver, instrumento):
    try:
        esperar_elemento(driver, "/html/body/div[1]/div[3]/div[1]/div[1]/div[1]/div[4]").click()
        esperar_elemento(driver, "/html[1]/body[1]/div[1]/div[3]/div[2]/div[1]/div[1]/ul[1]/li[6]/a[1]").click()
        campo_pesquisa = esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[3]/div[1]/div[1]/form[1]/table[1]/tbody[1]/tr[2]/td[2]/input[1]")
        campo_pesquisa.clear()
        campo_pesquisa.send_keys(instrumento)
        esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[3]/div[1]/div[1]/form[1]/table[1]/tbody[1]/tr[2]/td[2]/span[1]/input[1]").click()
        time.sleep(1)
        esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[3]/div[3]/table[1]/tbody[1]/tr[1]/td[1]/div[1]/a[1]").click()
        return True
    except:
        print(f"‚ö†Ô∏è Instrumento {instrumento} n√£o encontrado.")
        return False



import time


def processar_aba_ajustes(driver):
    """ Acessa a aba Ajustes do PT, identifica o maior n√∫mero (antes da barra) e sua situa√ß√£o, e salva na planilha. """

    situacao_ajustes = "Nenhum registro encontrado"
    numero_maior = None

    try:
        print("üìÇ Acessando Aba Ajustes do PT...")

        # üìå 1Ô∏è‚É£ Localizar e clicar na aba principal de Ajustes do PT
        aba_ajustes = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable((By.CSS_SELECTOR, "div[id='div_-481524888'] span span"))
        )
        print("‚úÖ Aba Ajustes do PT encontrada!")

        driver.execute_script("arguments[0].scrollIntoView();", aba_ajustes)
        time.sleep(1)

        try:
            aba_ajustes.click()
        except (ElementNotInteractableException, ElementClickInterceptedException):
            print("‚ö†Ô∏è Clique normal falhou, tentando via JavaScript...")
            driver.execute_script("arguments[0].click();", aba_ajustes)

        time.sleep(2)

        # üìå 2Ô∏è‚É£ Localizar e clicar na aba secund√°ria dentro de Ajustes do PT
        sub_aba_ajustes = WebDriverWait(driver, 3).until(
            EC.element_to_be_clickable(
                (By.CSS_SELECTOR, "a[id='menu_link_-481524888_-1293190284'] div[class='inactiveTab'] span span"))
        )
        print("‚úÖ Sub Aba Ajustes do PT encontrada!")

        driver.execute_script("arguments[0].scrollIntoView();", sub_aba_ajustes)
        time.sleep(1)

        try:
            sub_aba_ajustes.click()
        except (ElementNotInteractableException, ElementClickInterceptedException):
            print("‚ö†Ô∏è Clique normal falhou, tentando via JavaScript...")
            driver.execute_script("arguments[0].click();", sub_aba_ajustes)

        time.sleep(2)

        # üìå 3Ô∏è‚É£ Esperar a tabela carregar dentro do caminho fornecido
        tabela_ajustes = WebDriverWait(driver, 3).until(
            EC.presence_of_element_located((By.XPATH, "/html/body/div[3]/div[15]/div[3]/div[2]/div[2]"))
        )
        linhas = tabela_ajustes.find_elements(By.TAG_NAME, "tr")

        if not linhas or len(linhas) < 2:  # Verifica se h√° pelo menos uma linha de dados
            print("‚ö†Ô∏è Nenhuma linha de dados encontrada na tabela de Ajustes do PT.")
            return situacao_ajustes, numero_maior

        maior_numero = -1
        situacao_maior = "Desconhecida"

        # üìå 4Ô∏è‚É£ Encontrar √≠ndice das colunas "N√∫mero" e "Situa√ß√£o"
        cabecalho = linhas[0].find_elements(By.TAG_NAME, "th")
        indices = {"N√∫mero": None, "Situa√ß√£o": None}

        for i, coluna in enumerate(cabecalho):
            texto = coluna.text.strip()
            if "N√∫mero" in texto:
                indices["N√∫mero"] = i
            elif "Situa√ß√£o" in texto:
                indices["Situa√ß√£o"] = i

        if indices["N√∫mero"] is None or indices["Situa√ß√£o"] is None:
            print("‚ùå Erro: N√£o foram encontradas as colunas 'N√∫mero' e 'Situa√ß√£o'.")
            return situacao_ajustes, numero_maior

        # üìå 5Ô∏è‚É£ Identificar o maior n√∫mero antes da barra ("/") e sua situa√ß√£o correspondente
        for linha in linhas[1:]:  # Ignora cabe√ßalho
            colunas = linha.find_elements(By.TAG_NAME, "td")

            if len(colunas) > max(indices["N√∫mero"], indices["Situa√ß√£o"]):  # Garante que os √≠ndices s√£o v√°lidos
                try:
                    numero_texto = colunas[indices["N√∫mero"]].text.strip()

                    # üí° Extraindo apenas a parte antes da barra
                    if "/" in numero_texto:
                        numero_base = int(numero_texto.split("/")[0])  # Pega apenas o n√∫mero antes da barra
                    else:
                        numero_base = int(numero_texto)  # Caso n√£o tenha barra, converte normalmente

                    situacao = colunas[indices["Situa√ß√£o"]].text.strip()

                    if numero_base > maior_numero:
                        maior_numero = numero_base
                        situacao_maior = situacao

                except ValueError:
                    print(f"‚ö†Ô∏è N√∫mero inv√°lido encontrado: {numero_texto}")

        if maior_numero == -1:
            print("‚ö†Ô∏è Nenhum n√∫mero v√°lido encontrado.")
            return situacao_ajustes, numero_maior

        situacao_ajustes = situacao_maior
        numero_maior = f"{maior_numero}/2024"  # Formata de volta para o formato correto

        print(f"‚úÖ Maior n√∫mero encontrado: {numero_maior} - Situa√ß√£o: {situacao_ajustes}")

        # üìå 6Ô∏è‚É£ Salvar os dados na planilha
        df = pd.DataFrame({"N√∫mero": [numero_maior], "Situa√ß√£o": [situacao_ajustes]})
        df.to_excel("saida_ajustes.xlsx", index=False)
        print("üìÅ Dados salvos na planilha 'saida_ajustes.xlsx'.")

    except TimeoutException:
        print("‚ùå Erro: Tempo limite ao tentar acessar a Aba Ajustes do PT.")
    except NoSuchElementException:
        print("‚ùå Erro: Elemento n√£o encontrado. O seletor pode estar incorreto.")
    except Exception as e:
        print(f"‚ùå Erro ao processar Aba Ajustes do PT: {e}")

    return situacao_ajustes, numero_maior  # Retorna os valores extra√≠dos


def processar_aba_TA(driver):
    """Acessa a Aba TA, identifica o maior n√∫mero da coluna 'N√∫mero' e extrai sua situa√ß√£o correspondente."""

    situacao_TA = "Tabela n√£o encontrada"
    numero_maior = "Tabela n√£o encontrada"

    try:
        print("üìÇ Acessando a Aba TA...")

        # 1Ô∏è‚É£ Clicar na Aba TA principal via JavaScript (usando querySelector)
        try:
            aba_TA = driver.execute_script("return document.querySelector('#menu_link_-481524888_82854 > div')")
            if aba_TA:
                driver.execute_script("arguments[0].scrollIntoView();", aba_TA)
                driver.execute_script("arguments[0].click();", aba_TA)
                print("‚úÖ Aba TA acessada!")
            else:
                print("‚ùå Erro: Aba TA n√£o encontrada!")
                return numero_maior, situacao_TA
        except Exception as e:
            print(f"‚ùå Erro ao clicar na Aba TA: {e}")
            return numero_maior, situacao_TA

        # 2Ô∏è‚É£ Clicar na Sub Aba TA via JavaScript (usando querySelector)
        try:
            sub_aba_TA = driver.execute_script(
                "return document.querySelector('#menu_link_-173460853_82854 > div > span > span');")

            if sub_aba_TA:
                driver.execute_script("arguments[0].scrollIntoView();", sub_aba_TA)  # Garantir visibilidade

                # Tentar clique normal
                try:
                    sub_aba_TA.click()
                except (ElementNotInteractableException, ElementClickInterceptedException):
                    print("‚ö†Ô∏è Clique normal falhou, tentando via JavaScript...")
                    driver.execute_script("arguments[0].click();", sub_aba_TA)

                print("‚úÖ Sub Aba TA acessada!")
            else:
                print("‚ùå Erro: Sub Aba TA n√£o encontrada!")

        except Exception as e:
            print(f"‚ùå Erro ao clicar na Sub Aba TA: {e}")
            return numero_maior, situacao_TA

        # 3Ô∏è‚É£ Esperar a tabela carregar
        try:
            tabela_TA = WebDriverWait(driver, 15).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#row"))
            )
            print("‚úÖ Tabela TA carregada!")
        except TimeoutException:
            print("‚ö†Ô∏è Tabela TA n√£o carregou completamente.")
            return numero_maior, situacao_TA

        # 4Ô∏è‚É£ Capturar os √≠ndices das colunas "N√∫mero" e "Situa√ß√£o"
        cabecalho = tabela_TA.find_elements(By.TAG_NAME, "th")
        indices = {"N√∫mero": None, "Situa√ß√£o": None}

        for i, coluna in enumerate(cabecalho):
            texto = coluna.text.strip().lower()
            if "n√∫mero" in texto:
                indices["N√∫mero"] = i
            elif "situa√ß√£o" in texto:
                indices["Situa√ß√£o"] = i

        if indices["N√∫mero"] is None or indices["Situa√ß√£o"] is None:
            print("‚ùå Erro: Colunas 'N√∫mero' e 'Situa√ß√£o' n√£o foram encontradas.")
            return numero_maior, situacao_TA

        # 5Ô∏è‚É£ Identificar o maior n√∫mero antes da barra ("/") e sua situa√ß√£o correspondente
        maior_numero = -1
        situacao_maior = "Desconhecida"
        linhas = tabela_TA.find_elements(By.TAG_NAME, "tr")[1:]  # Ignorar cabe√ßalho

        for linha in linhas:
            colunas = linha.find_elements(By.TAG_NAME, "td")
            if len(colunas) > max(indices["N√∫mero"], indices["Situa√ß√£o"]):  # Garante que os √≠ndices s√£o v√°lidos
                try:
                    numero_texto = colunas[indices["N√∫mero"]].text.strip()
                    situacao = colunas[indices["Situa√ß√£o"]].text.strip()

                    # üí° Extraindo apenas a parte antes da barra "/"
                    numero_base = int(numero_texto.split("/")[0]) if "/" in numero_texto else int(numero_texto)

                    if numero_base > maior_numero:
                        maior_numero = numero_base
                        situacao_maior = situacao

                except ValueError:
                    print(f"‚ö†Ô∏è N√∫mero inv√°lido encontrado: {numero_texto}")

        if maior_numero == -1:
            print("‚ö†Ô∏è Nenhum n√∫mero v√°lido encontrado.")
            return numero_maior, situacao_TA

        situacao_TA = situacao_maior
        numero_maior = f"{maior_numero}/2024"  # Formata de volta para o formato correto

        print(f"‚úÖ Maior n√∫mero encontrado: {numero_maior} - Situa√ß√£o: {situacao_TA}")

    except TimeoutException:
        print("‚ùå Erro: Tempo limite ao tentar acessar a Aba TA.")
    except NoSuchElementException:
        print("‚ùå Erro: Elemento n√£o encontrado. O seletor pode estar incorreto.")
    except Exception as e:
        print(f"‚ùå Erro ao processar Aba TA: {e}")

    return numero_maior, situacao_TA  # Retorna os valores extra√≠dos



def processar_aba_rendimento_aplicacao(driver):
    """Acessa a aba de Rendimento de Aplica√ß√£o e verifica o status da solicita√ß√£o."""

    status_rendimento = "Nenhum registro foi encontrado"  # Valor padr√£o

    try:
        print("üìÇ Acessando Aba Rendimento de Aplica√ß√£o...")

        # üìå Passo 1: Clicar na aba correta
        aba_rendimento = driver.execute_script(
            "return document.querySelector('#menu_link_-481524888_1776368057 > div > span > span')"
        )
        if aba_rendimento:
            driver.execute_script("arguments[0].scrollIntoView();", aba_rendimento)
            driver.execute_script("arguments[0].click();", aba_rendimento)
            print("‚úÖ Aba Rendimento de Aplica√ß√£o acessada!")
        else:
            print("‚ö†Ô∏è Aba Rendimento de Aplica√ß√£o n√£o encontrada.")
            return status_rendimento

        # üìå Passo 2: Aguardar a tabela carregar
        tabela = WebDriverWait(driver, 15).until(
            EC.presence_of_element_located((By.XPATH, "/html/body/div[3]/div[15]/div[7]"))
        )
        if not tabela:
            print("‚ö†Ô∏è Tabela de Rendimento de Aplica√ß√£o n√£o encontrada.")
            return status_rendimento

        # üìå Passo 3: Procurar pela coluna "Status da Solicita√ß√£o"
        linhas = tabela.find_elements(By.TAG_NAME, "tr")
        if not linhas:
            print("‚ö†Ô∏è Nenhuma linha encontrada na tabela de Rendimento de Aplica√ß√£o.")
            return status_rendimento

        for linha in linhas:
            colunas = linha.find_elements(By.TAG_NAME, "td")

            if len(colunas) >= 1:  # Verifica se h√° pelo menos uma coluna na linha
                status_texto = colunas[0].text.strip()  # Pegando a primeira coluna

                if "Em an√°lise" in status_texto:
                    print(f"‚úÖ Situa√ß√£o encontrada: {status_texto}")
                    return status_texto  # Retorna o status encontrado

        print("‚ö†Ô∏è Nenhum status 'Em an√°lise' encontrado.")
        return status_rendimento  # Retorna valor padr√£o se nada for encontrado

    except Exception as e:
        print(f"‚ùå Erro ao processar Aba Rendimento de Aplica√ß√£o: {e}")
        return "Erro ao processar"






# üìå Processar Aba Anexos
def processar_aba_anexos(driver):
    """ Acessa a aba de Anexos e extrai a Data Upload mais recente. """

    data_upload_recente = "Nenhum anexo encontrado"  # Valor padr√£o caso nada seja encontrado
    erro_pesquisa = "Pesquisa n√£o realizada"  # Caso o bot√£o de pesquisa n√£o seja encontrado

    try:
        print("üìÇ Acessando Aba de Anexos...")

        # üìå Passo 1: Acessar a aba correta
        aba_anexos_primaria = esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[1]/div[1]/div[1]/a[2]/div[1]/span[1]/span[1]")
        if aba_anexos_primaria:
            driver.execute_script("arguments[0].scrollIntoView();", aba_anexos_primaria)
            aba_anexos_primaria.click()
        else:
            print("‚ö†Ô∏è Aba Anexos n√£o encontrada.")
            return data_upload_recente, erro_pesquisa

        aba_anexos_secundaria = esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[1]/div[1]/div[2]/a[8]/div[1]/span[1]/span[1]")
        if aba_anexos_secundaria:
            driver.execute_script("arguments[0].scrollIntoView();", aba_anexos_secundaria)
            aba_anexos_secundaria.click()
        else:
            print("‚ö†Ô∏è Aba secund√°ria de Anexos n√£o encontrada.")
            return data_upload_recente, erro_pesquisa

        # üìå Passo 2: Clicar no bot√£o de pesquisa para carregar a lista de anexos
        botao_pesquisar = esperar_elemento(driver, "/html[1]/body[1]/div[3]/div[15]/div[3]/div[1]/div[1]/form[1]/table[1]/tbody[1]/tr[1]/td[2]/input[2]")
        if botao_pesquisar:
            driver.execute_script("arguments[0].click();", botao_pesquisar)
        else:
            print("‚ö†Ô∏è Bot√£o de pesquisa n√£o encontrado.")
            return data_upload_recente, "Bot√£o de pesquisa n√£o encontrado"

        # üìå Passo 3: Aguardar a tabela carregar
        tabela_anexos = esperar_elemento(driver, "/html/body/div[3]/div[15]/div[4]/div/div[1]/form/div/div[1]/table")
        if not tabela_anexos:
            print("‚ö†Ô∏è Tabela de anexos n√£o encontrada.")
            return data_upload_recente, "Tabela de anexos n√£o encontrada"

        # üìå Passo 4: Coletar todas as linhas da tabela
        linhas = tabela_anexos.find_elements(By.TAG_NAME, "tr")
        if not linhas:
            print("‚ö†Ô∏è Nenhum anexo encontrado.")
            return data_upload_recente, "Nenhum anexo na tabela"

        datas_upload = []  # Lista para armazenar as datas encontradas

        for linha in linhas[1:]:  # Ignorar cabe√ßalho
            colunas = linha.find_elements(By.TAG_NAME, "td")

            if len(colunas) >= 3:  # Garante que h√° pelo menos 3 colunas
                data_texto = colunas[2].text.strip()  # Pegando a coluna 'Data Upload'

                if data_texto:
                    try:
                        data_formatada = datetime.strptime(data_texto, "%d/%m/%Y")
                        datas_upload.append(data_formatada)
                    except ValueError:
                        print(f"‚ö†Ô∏è Data inv√°lida ignorada: {data_texto}")

        # üìå Passo 5: Se houver datas, pegar a mais recente
        if datas_upload:
            data_upload_recente = max(datas_upload).strftime("%d/%m/%Y")
            print(f"üìÖ Data mais recente na coluna 'Data Upload': {data_upload_recente}")
        else:
            print("‚ö†Ô∏è Nenhuma data v√°lida encontrada na coluna 'Data Upload'.")

    except Exception as e:
        print(f"‚ùå Erro ao processar Aba de Anexos: {e}")
        return "Erro ao processar", "Erro ao processar"

    return data_upload_recente, "Pesquisa realizada com sucesso"





from datetime import datetime
from selenium.webdriver.common.action_chains import ActionChains

# üìå Processar Aba Esclarecimentos
def processar_aba_esclarecimentos(driver):
    """Acessa a aba Esclarecimentos, percorre todas as p√°ginas, encontra a Data de Solicita√ß√£o mais recente e clica em 'Detalhar'."""
    try:
        print("üìÇ Acessando Aba Esclarecimentos...")

        # üìå Passo 1: Acessar a aba correta
        aba_esclarecimentos_primaria = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable((By.XPATH, "/html[1]/body[1]/div[3]/div[2]/div[4]/div[1]/div[7]"))
        )
        aba_esclarecimentos_primaria.click()
        time.sleep(1)

        aba_esclarecimentos_secundaria = WebDriverWait(driver, 10).until(
            EC.element_to_be_clickable(
                (By.XPATH, "/html[1]/body[1]/div[3]/div[2]/div[5]/div[1]/div[2]/ul[1]/li[1]/a[1]"))
        )
        aba_esclarecimentos_secundaria.click()
        time.sleep(1)

        # üìå Passo 2: Identificar o n√∫mero total de p√°ginas
        try:
            paginacao_texto = WebDriverWait(driver, 5).until(
                EC.presence_of_element_located((By.CSS_SELECTOR, "#esclarecimentos > span:nth-child(1)"))
            ).text

            # Extraindo o n√∫mero total de p√°ginas do texto (ex: "P√°gina 1 de 5 (81 item(s))")
            total_paginas = int(paginacao_texto.split(" de ")[1].split(" ")[0])
            print(f"üìÑ Total de p√°ginas encontradas: {total_paginas}")

        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao identificar n√∫mero de p√°ginas: {e}")
            total_paginas = 1  # Se n√£o conseguir identificar, assume que h√° apenas uma p√°gina

        # Vari√°veis para armazenar a data mais recente e seu bot√£o correspondente
        data_mais_recente = None
        botao_detalhar_associado = None

        # üìå Passo 3: Percorrer todas as p√°ginas e encontrar a data mais recente
        for pagina in range(1, total_paginas + 1):
            print(f"‚û°Ô∏è Acessando p√°gina {pagina} de {total_paginas}...")

            if pagina > 1:
                try:
                    # Clicar no bot√£o para avan√ßar para a pr√≥xima p√°gina
                    botao_proxima_pagina = WebDriverWait(driver, 5).until(
                        EC.element_to_be_clickable((By.LINK_TEXT, str(pagina)))
                    )
                    driver.execute_script("arguments[0].scrollIntoView();", botao_proxima_pagina)
                    botao_proxima_pagina.click()
                    time.sleep(1)  # Aguarde a nova p√°gina carregar
                except Exception as e:
                    print(f"‚ö†Ô∏è Erro ao mudar para a p√°gina {pagina}: {e}")
                    break

            try:
                # Localizar a tabela de esclarecimentos
                tabela_esclarecimentos = WebDriverWait(driver, 10).until(
                    EC.presence_of_element_located((By.XPATH,
                                                    "/html/body/div[3]/div[15]/div[4]/div[1]/div/form/table/tbody/tr[6]/td/div[1]/table"))
                )
                linhas = tabela_esclarecimentos.find_elements(By.TAG_NAME, "tr")

                for linha in linhas:
                    colunas = linha.find_elements(By.TAG_NAME, "td")

                    if len(colunas) >= 7:
                        try:
                            data_texto = colunas[0].text.strip()
                            botao_detalhar = colunas[6].find_element(By.TAG_NAME, "a")

                            if data_texto and botao_detalhar:
                                try:
                                    data_formatada = datetime.strptime(data_texto, "%d/%m/%Y")

                                    if data_mais_recente is None or data_formatada > data_mais_recente:
                                        data_mais_recente = data_formatada
                                        botao_detalhar_associado = botao_detalhar

                                except ValueError:
                                    print(f"‚ö†Ô∏è Data inv√°lida ignorada: {data_texto}")

                        except Exception as e:
                            print(f"‚ö†Ô∏è Erro ao processar linha da tabela: {e}")

            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao buscar dados na p√°gina {pagina}: {e}")

        # üìå Passo 4: Se encontrou uma data v√°lida, clicar em "Detalhar"
        if botao_detalhar_associado:
            data_esclarecimento = data_mais_recente.strftime("%d/%m/%Y")
            print(f"üìÖ Data de Esclarecimento mais recente: {data_esclarecimento}")

            driver.execute_script("arguments[0].scrollIntoView();", botao_detalhar_associado)
            ActionChains(driver).move_to_element(botao_detalhar_associado).perform()
            botao_detalhar_associado.click()
            print("‚úÖ Clicou no bot√£o 'Detalhar'!")
            time.sleep(1)
        else:
            print("‚ö†Ô∏è Nenhuma Data de Solicita√ß√£o encontrada.")
            return "Sem informa√ß√£o", "Nenhum anexo encontrado"

        # üìå Passo 5: Verificar anexos
        anexo_esclarecimento = "Nenhum anexo encontrado"
        try:
            print("üîç Verificando se h√° anexos...")

            tabela_anexos = WebDriverWait(driver, 10).until(
                EC.presence_of_element_located(
                    (By.XPATH, "/html/body/div[3]/div[15]/div[3]/div/div/form/table/tbody/tr[18]/td/div"))
            )
            anexos_texto = tabela_anexos.text.strip()

            if anexos_texto:
                anexo_esclarecimento = anexos_texto
                print(f"üìÇ Anexos encontrados: {anexo_esclarecimento}")
            else:
                print("‚ö†Ô∏è Nenhum anexo encontrado.")

        except Exception as e:
            print(f"‚ö†Ô∏è Erro ao verificar anexos: {e}")

        return data_esclarecimento, anexo_esclarecimento

    except Exception as e:
        print(f"‚ö†Ô∏è Erro ao processar Aba Esclarecimentos: {e}")
        return "Erro ao processar", "Erro ao processar"




# üìÇ Caminho da planilha de sa√≠da
CAMINHO_PLANILHA_SAIDA = r"C:\Users\diego.brito\Downloads\robov1\saida.xlsx"

# üöÄ Fluxo principal do rob√¥
def executar_robo():
    """ Executa o rob√¥ navegando entre as abas e coletando os dados, ignorando campos vazios (NaN). """
    driver = conectar_navegador_existente()
    df_entrada = ler_planilha()

    # üîπ **Filtrar apenas instrumentos v√°lidos (n√£o NaN)**
    df_entrada = df_entrada[df_entrada["Instrumento n¬∫"].notna()]

    if df_entrada.empty:
        print("‚ö†Ô∏è Nenhum instrumento v√°lido encontrado na planilha. Finalizando...")
        return

    dados_saida = []

    print("üöÄ Iniciando processamento dos instrumentos...")

    for index, row in df_entrada.iterrows():
        instrumento = str(row["Instrumento n¬∫"]).strip()

        # üîπ **Verificar se o campo n√£o est√° vazio ap√≥s convers√£o**
        if not instrumento or instrumento in ["nan", "None", ""]:
            print(f"‚ö†Ô∏è Instrumento inv√°lido encontrado na linha {index + 1}. Pulando...")
            continue

        print(f"\nüîé Processando Instrumento N¬∫: {instrumento} ({index + 1}/{len(df_entrada)})")

        try:
            if not navegar_menu_principal(driver, instrumento):
                print(f"‚ö†Ô∏è Instrumento {instrumento} n√£o encontrado. Pulando para o pr√≥ximo...")
                continue

            # Chamando fun√ß√µes de processamento de cada aba
            data_ajustes, situacao_ajustes = processar_aba_ajustes(driver)
            data_ta, situacao_ta = processar_aba_TA(driver)
            status_registro = processar_aba_rendimento_aplicacao(driver)
            data_upload, pesquisa_status = processar_aba_anexos(driver)
            data_esclarecimento, anexo_esclarecimento = processar_aba_esclarecimentos(driver)

            # Adicionando os dados na lista de sa√≠da
            dados_saida.append([
                instrumento, situacao_ajustes, data_ajustes, situacao_ta, data_ta,
                status_registro, data_upload, data_esclarecimento, anexo_esclarecimento
            ])

            # üìå Criar DataFrame e salvar ap√≥s cada instrumento processado
            df_saida = pd.DataFrame(dados_saida, columns=[
                "Instrumento", "N√∫mero Ajustes", "Situa√ß√£o Ajustes", "N√∫mero TA", "Situa√ß√£o TA",
                "Rendimento de aplica√ß√£o", "√öltimo Upload", "Data Esclarecimento", "Anexo Esclarecimento"
            ])
            df_saida.to_excel(CAMINHO_PLANILHA_SAIDA, index=False)
            print(f"üìÇ Planilha atualizada: {CAMINHO_PLANILHA_SAIDA}")

            # üìå Passo Final: Voltar para a pesquisa de instrumentos
            try:
                print("üîÑ Voltando para a tela de pesquisa...")

                botao_voltar = WebDriverWait(driver, 10).until(
                    EC.element_to_be_clickable((By.XPATH, "/html/body/div[3]/div[2]/div[1]/a"))
                )
                driver.execute_script("arguments[0].scrollIntoView();", botao_voltar)
                botao_voltar.click()
                time.sleep(1)  # Aguarde a p√°gina carregar

                print("‚úÖ Retornou para a tela de pesquisa!")

            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao tentar voltar para a tela de pesquisa: {e}")

        except Exception as e:
            print(f"‚ùå Erro ao processar o instrumento {instrumento}: {e}")
            continue  # Continua para o pr√≥ximo instrumento mesmo em caso de erro

    print("‚úÖ Processamento conclu√≠do! Planilha salva com sucesso.")

# üî• Executando o rob√¥
executar_robo()
